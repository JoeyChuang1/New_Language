exception NotImplemented

type tp =
  | Arrow of tp list * tp   (* function type: S1 S2 ... Sn -> T *)
  | Int
  | Bool

(* Used for variables, aka "identifiers" *)
type name = string

(* The primitive operations available in *)
type primop = Equals | LessThan | Plus | Minus | Times | Negate

(* Expressions in  *)
type exp =
  | I of int                          (* 0 | 1 | 2 | ... *)
  | B of bool                         (* true | false *)
  | If of exp * exp * exp             (* if e then e1 else e2 *)
  | Primop of primop * exp list       (* e1 <op> e2  or <op> e *)
  | Fn of ((name * tp) list * exp)    (* fn (x_1: t_1, ..., x_n: t_n) => e *)
  | Rec of (name * tp * exp)          (* rec (f: t) => e *)
  | Let of (name * exp * exp)         (* let x = e1 in e2 end *)
  | Apply of exp * (exp list)         (* e (e_1, e_2, ..., e_n) *)
  | Var of name                       (* x *)

(* Some example programs *)
(* fun (x: int, y: int) => (x * x) + (y * y) *)
let ex1 =
  Fn ([("x", Int); ("y", Int)],
      Primop (Plus,
              [Primop (Times, [Var "x"; Var "x"]);
               Primop (Times, [Var "y"; Var "y"])]))
(* fun () => true *)
let ex2 = Fn ([], B true)
(* let f = (fun (x: int, y: int) => (x * x) + (y * y))
   in
   f (3, 4)
*)
let ex3 =
  Let ("f", ex1,
       Apply (Var "f", [I 3; I 4]))
(* let g = (fun () => true)
   in
   g () *)
let ex4 =
  Let ("g", ex2,
       Apply (Var "g", []))
(* let f = (fun (x: int, y: int) => (x * x) + (y * y))
   in
   f (3)
   Note: this expression is syntactically valid, but ill-typed!
*)
let ex5 =
  Let ("f", ex1,
       Apply (Var "f", [I 3]))
(* let f = (fun (x: int) => (fun (y: int) => (x * x) + (y * y)))
   in
   (f (3)) (4)
*)
let ex6 =
  Let ("f",
       Fn ([("x", Int)],
           Fn ([("y", Int)],
               Primop (Plus,
                       [Primop (Times, [Var "x"; Var "x"]);
                        Primop (Times, [Var "y"; Var "y"])]))),
       Apply (Apply (Var "f", [I 3]),
              [I 4]))
(* let f = (fun (x: int) => (fun (y: int) => (x * x) + (y * y)))
   in
   f (3, 4)
   Note: this expression is syntactically valid, but ill-typed!
*)
let ex7 =
  Let ("f",
       Fn ([("x", Int)],
           Fn ([("y", Int)],
               Primop (Plus,
                       [Primop (Times, [Var "x"; Var "x"]);
                        Primop (Times, [Var "y"; Var "y"])]))),
       Apply (Var "f", [I 3; I 4]))


(* PART 1: unused_vars *)

(* Deletes every occurence of the elements of xs from l.
   e.g. delete [w; y] [y; x; y; z; w] = [x; z]
*)
let rec delete xs l =
  List.filter (fun x -> not (List.mem x xs)) l

(* free_variables e = list of names occurring free in e
   Invariant: every name occurs at most once.

   The algorithm works from the leaves of the expression tree
   upwards. Every time a variable is encountered, it is considered free.
   When a binding construct is encountered (e.g. Let) the declared
   variable is deleted from the set of free variables formed by the union
   of the recursive calls.
   Other constructs simply form the union of the sets of free variables
   from the recursive calls and return it.
 *)
let rec free_variables =
  (* Taking unions of lists.
     If the lists are in fact sets (all elements are unique),
     then the result will also be a set.
  *)
  let union l1 l2 =
    let l1' = List.filter (fun x -> not (List.mem x l2)) l1 in
    l1' @ l2
  in
  let union_fvs es =
    List.fold_left (fun acc exp -> union acc (free_variables exp)) [] es
  in
  function
  | Var y -> [y]
  | I _ | B _ -> []
  | If(e, e1, e2) -> union_fvs [e; e1; e2]
  | Primop (po, args) -> union_fvs args
  | Fn (xs, e) ->
      let xs = List.map fst xs in
      delete xs (free_variables e)
  | Rec (x, t, e) ->
      delete [x] (free_variables e)
  | Let (x, e1, e2) ->
      let e1_vars = free_variables e1 in
      let e2_vars = delete [x] (free_variables e2) in
      union e1_vars e2_vars
  | Apply (e, es) -> union_fvs (e :: es)
;;

(* PART 2: subst *)

(* A substitution [e/x]. This is read as "e for x". *)
type subst = exp * name
;;

(* PART 3: eval *)

(* Runtime errors that may be raised by eval. *)
type runtime_error =
  | Free_variable of name
  | Bad_primop_args
  | If_non_true_false
  | Arity_mismatch
  | Apply_non_fn

exception Stuck of runtime_error

(* Evaluates a primitive operation *)
let eval_op op exps =
  match op, exps with
  | (Equals,   [I i; I i']) -> Some (B (i = i'))
  | (LessThan, [I i; I i']) -> Some (B (i < i'))
  | (Plus,     [I i; I i']) -> Some (I (i + i'))
  | (Minus,    [I i; I i']) -> Some (I (i - i'))
  | (Times,    [I i; I i']) -> Some (I (i * i'))
  | (Negate,   [I i])       -> Some (I (-i))
  | _                       -> None
;;

(* PART 4: infer *)

(* Type contexts *)
type context = (name * tp) list
let empty = []

(* Looks up the topmost x in ctx and returns its corresponding type.
   If the variable x cannot be located in ctx, raises Not_found.
*)
let lookup (x: name) (ctx: context) = List.assoc x ctx

(* Adds a new type ascription to a context. *)
let extend ctx (x, tau) = (x, tau) :: ctx

(* Adds multiple new type ascriptions to a context. *)
let extend_list (ctx: context) (l: (name * tp) list) =
  List.fold_left extend ctx l

(* Type errors that may be raised by infer *)
type type_error =
  | Free_variable of name
  | Apply_non_arrow of tp (* expected an arrow type, but instead found... *)
  | Arity_mismatch
  | Type_mismatch of tp * tp (* (expected type, actual type) *)

exception TypeError of type_error

(* Convenience function for raising type mismatch errors *)
let type_mismatch expected_type inferred_type =
  raise (TypeError (Type_mismatch (expected_type, inferred_type)))

(* Computes the type of a primitive operation.
   The result is a tuple representing the domain and range of the primop.
 *)
let primopType (p: primop): tp list * tp = match p with
  | Equals   -> ([Int; Int], Bool)
  | LessThan -> ([Int; Int], Bool)
  | Plus     -> ([Int; Int], Int)
  | Minus    -> ([Int; Int], Int)
  | Times    -> ([Int; Int], Int)
  | Negate   -> ([Int], Int)
;;

(* Part 5: Unification *)

(* We extend types to support variables. We also
   simplify arrow types to be of the form S -> T
   instead of S1 ... Sn -> T *)
type utp =
  | UArrow of utp * utp
  | UInt
  | UBool
  | UTVar of (utp option) ref

(* Different errors that can arise during unification. *)
type unif_error =
  (* Raised when attempting to unify a type variable 'a with a type t
     of which 'a is a subexpression, e.g. t is Product ['a; 'a] *)
  | UnifOccursCheckFails
  (* Raised when the unifier attempts to unify mismatched types,
     e.g. Bool with Int, or an Arrow with a Product. *)
  | UnifMismatch of utp * utp
  (* Raised when trying to unify product types with mismatched lengths *)
  | UnifProductMismatch

(* An exception constructor so that we can raise unif_error values. *)
exception UnifError of unif_error

(* Convenience function for raising unif_error values. *)
let unif_error e = raise (UnifError e)

(* `occurs a t` checks whether the type variable `a` appears in the
    type `t`.
*)
let rec occurs a t = match t with
  | UInt | UBool -> false
  | UArrow (t1, t2) -> occurs a t1 || occurs a t2
  | UTVar b ->
    match !b with
    | Some t' -> occurs a t'
    | None -> a == b

(* -------------------------------------------------------------*)
(* Other helper functions                                       *)
(* You don't need to look at these to do the assignment, but it *)
(* would be a good idea to understand them.                     *)
(* -------------------------------------------------------------*)

(* Generating fresh (new) variable names *)
type gen_var = {
  fresh: name -> name; (* generates a fresh name based on a given one. *)
  reset : unit -> unit (* resets the internal counter for making names. *)
}

let gen_var : gen_var =
  let counter = ref 0 in
  let fresh x = incr counter; x ^ (string_of_int (!counter)) in
  let reset () = counter := 0 in
  {fresh; reset}

let freshVar = gen_var.fresh
let resetCtr = gen_var.reset

(* Converts a type to a string representation. *)
let rec string_of_tp t = match t with
  | Arrow (t1s, t2) ->
      (String.concat " " (List.map string_of_tp t1s)) ^
      " -> " ^
      string_of_tp t2
  | Int -> "int"
  | Bool -> "bool"

(* String representations of expressions. Useful for debugging!
   Note that this expression printer is very primitive, but it should suit
   your needs most of the time.
*)
let nl_sep l = String.concat "\n" l

let bracket str = "(" ^ str ^ ")"

let string_of_op p = match p with
  | Equals   -> " = "
  | LessThan -> " < "
  | Plus     -> " + "
  | Minus    -> " - "
  | Times    -> " * "
  | Negate   -> "-"

let rec string_of_exp indent exp =
  let new_ind = indent ^ "  " in
  let string_of_exp' = string_of_exp indent in
  let string_of_exp'' = string_of_exp new_ind in
  match exp with
  | I n ->
      if n < 0 then bracket (string_of_int n)
      else string_of_int n
  | B b -> if b then "True" else "False"
  | If (p, e1, e2) ->
      nl_sep
        ["if " ^ (string_of_exp'' p) ^ " then";
         new_ind ^ (string_of_exp'' e1);
         indent ^ "else";
         new_ind ^ (string_of_exp'' e2)]
  | Primop (p, el) ->
      bracket @@
      if p = Negate then
        (string_of_op p) ^ (string_of_exp' (List.nth el 0))
      else
        (string_of_exp' (List.nth el 0)) ^
        (string_of_op p) ^
        (string_of_exp' (List.nth el 1))
  | Fn (xs, exp) ->
      let params =
        String.concat ", "
          (List.map (fun (x, tp) -> x ^ ": " ^ (string_of_tp tp)) xs)
      in
      bracket @@
      nl_sep
        ["fun (" ^ params ^ ") =>";
         new_ind ^ (string_of_exp'' exp)]
  | Rec (name, tp, exp) ->
      bracket @@
      nl_sep
        ["rec (" ^ name ^ ": " ^ (string_of_tp tp) ^ ") =>";
         new_ind ^ (string_of_exp'' exp)]
  | Let (name, e1, e2) ->
      nl_sep
        ["let " ^ name ^ " = " ^ (string_of_exp' e1) ^ " in";
         new_ind ^ (string_of_exp'' e2)]
  | Apply (e, es) ->
      let params = bracket (String.concat ", " (List.map string_of_exp' es)) in
      (string_of_exp' e) ^ " " ^ params
  | Var name -> name

let print_exp exp = print_string (string_of_exp "" exp)

(* TODO: Write a good set of tests for unused_vars. *)
let unused_vars_tests = [
  (* An example test case.
     Note that you are *only* required to write tests for Rec, Fn, and Apply!
  *)
  (Let ("x", I 1, I 5), ["x"]);
  (Let ("y", I 1, I 5), ["y"]);
  (Rec("x", Int, I 5), ["x"]);
  (Fn([("x", Int)], Primop (Plus, [I 1; I 2])), ["x"]); 
  (Fn([("x", Int)], Primop (Times, [Var "x"; Var "x"])), []); 
  (Fn ([("x", Int); ("y", Int)],
       Primop (Plus,
               [Primop (Times, [Var "x"; Var "x"]);
                Primop (Times, [Var "y"; Var "y"])])), []);
  (Fn ([("x", Int); ("y", Int)], B true), ["x"; "y"]);
  ( Let ("f", ex1,
         Apply (Var "f", [I 3; I 4])), []);
  (Rec("z", Int, Primop (Plus,
                         [Primop (Times, [Var "x"; Var "x"]); Primop (Times, [Var "y"; Var "y"])])), ["z"]);
  (Apply (Var "x", [I 3; I 4]), []); 
  (Rec("x", Int,(Apply (Var "z", [I 3; I 4]))),["x"]);
  (Rec("x", Int,(Apply (Var "x", [I 3; I 4]))),[]) 
]

(* TODO: Implement the missing cases of unused_vars. *)
let rec unused_vars =
  function
  | Var _ | I _ | B _ -> []
  | If (e, e1, e2) -> unused_vars e @ unused_vars e1 @ unused_vars e2
  | Primop (_, args) ->
      List.fold_left (fun acc exp -> acc @ unused_vars exp) [] args
  | Let (x, e1, e2) ->
      let unused = unused_vars e1 @ unused_vars e2 in
      if List.mem x (free_variables e2) then
        unused
      else
        x :: unused

  | Rec (x, _, e) -> let result = unused_vars e in 
      if List.mem x (free_variables e) then
        result
      else 
        x :: result 
  | Fn (xs, e) -> (List.fold_left (fun acc nametp -> match nametp with
      | (a,_) -> if List.mem a (free_variables e) then 
            acc
          else a :: acc) [] xs) @ (unused_vars e)

  | Apply (e, es) -> (unused_vars e) @ (List.fold_left (fun acc exp -> acc @ unused_vars exp) [] es)

(* TODO: Write a good set of tests for subst. *)
(* Note: we've added a type annotation here so that the compiler can help
   you write tests of the correct form. *)
let subst_tests : (((exp * name) * exp) * exp) list = [
  (* An example test case. If you have trouble writing test cases of the
     proper form, you can try copying this one and modifying it.
     Note that you are *only* required to write tests for Rec, Fn, and Apply!
  *)
  (((I 1, "x"), Let ("y", I 2, Primop (Plus, [Var "y"; Var "x"]))),Let ("y", I 2, Primop (Plus, [Var "y"; I 1])));
  (((I 1, "x"), Rec( "y", Int, Var "x")), Rec( "y", Int, I 1));
  (((I 1, "z"), Fn ([("x", Int); ("y", Int)], Var "z")), Fn ([("x", Int); ("y", Int)], I 1));
  (((I 1, "x"),Apply (Var "x", [I 3; I 4])), Apply (I 1, [I 3; I 4]));
  (((I 1, "x"),Rec( "y", Int, Apply (Var "x", [I 3; I 4]))), Rec( "y", Int, Apply (I 1, [I 3; I 4])));
  (((I 1, "z"), Rec( "y", Int, Fn ([("x", Int); ("y", Int)], Var "z"))), Rec( "y", Int, Fn ([("x", Int); ("y", Int)], I 1)));
  (((I 1, "z"), Rec( "y", Int, Var "x")),  Rec( "y", Int, Var "x"));
  (((I 1, "z"),Rec( "y", Int, Apply (Var "x", [I 3; I 4]))),Rec( "y", Int, Apply (Var "x", [I 3; I 4])));
  (((B true, "x"),Rec( "y", Int, Apply (Var "x", [I 3; I 4]))),Rec( "y", Int, Apply (B true, [I 3; I 4])));
  (((Var "z", "x"),Rec( "x", Int, Apply (Var "x", [I 3; I 4]))),Rec( "x", Int, Apply (Var "x", [I 3; I 4])));
  (((Var "z", "x"), Rec( "z", Int, Var "x")),  Rec( "a", Int, Var "z"));
  (((I 1, "x"), Fn ([("x", Int); ("y", Int)], Var "x")), Fn ([("x", Int); ("y", Int)], Var "x"));
  (((Var "z", "x"), Fn ([("z", Int); ("y", Int)], Var "x")), Fn ([("a", Int); ("y", Int)], Var "z"));
  (((I 1, "x"),Apply (Var "x", [I 3;  Let ("y", I 2, Primop (Plus, [Var "y"; Var "x"]))])), Apply (I 1, [I 3; Let ("y", I 2, Primop (Plus, [Var "y"; I 1]))]));
  (((Primop (LessThan, [Var "o"; I 5]), "i"),(Fn ([("a", Int); ("o", Bool); ("z", Int)], Primop (Minus, [Var "i"; Var "o"])))),Fn ([ ("a", Int); ("o6", Bool);("z", Int)], Primop (Minus, [Primop (LessThan, [Var "o"; I 5]); Var "o6"]))); 
]

(* TODO: Implement the missing cases of subst. *)
let rec subst ((e', x) as s) exp =
  match exp with
  | Var y ->
      if x = y then e'
      else Var y
  | I n -> I n
  | B b -> B b
  | Primop (po, args) -> Primop (po, List.map (subst s) args)
  | If (e, e1, e2) ->
      If (subst s e, subst s e1, subst s e2)
  | Let (y, e1, e2) ->
      let e1' = subst s e1 in
      if y = x then
        Let (y, e1', e2)
      else
        let (y, e2) =
          if List.mem y (free_variables e') then
            rename y e2
          else
            (y, e2)
        in
        Let (y, e1', subst s e2)

  | Rec (y, t, e) -> 
      if (x = y) then Rec (y, t, e)
      else 
        let (y, e) =
          if List.mem y (free_variables e') then
            rename y e
          else 
            (y, e) in
        Rec (y, t, subst s e)
          
  | Fn (xs, e) -> 
      if (List.exists (fun (y, _) -> y = x) xs ) then
        Fn (xs, e)
      else 
      if (List.exists (fun (y, _) -> List.mem y (free_variables e')) xs) then 
        let rec recursive_add list_one list_two list_without acc = 
          match list_one, list_two, list_without  with 
          | [], _, [] -> acc
          | (a, b)::ss, _, [] -> recursive_add ss list_two [] (acc@[a,b])
          | [], _, (c, d)::sb -> recursive_add [] list_two sb (acc@[c,d])
          | (a, b)::ss, (c, d)::sb, (e, f)::sf ->
              if List.mem c (free_variables e') then recursive_add ss sb list_without (acc@[a,b]) 
              else recursive_add list_one sb sf (acc@[e,f])
          | _, _, _ -> acc in
        let rec two_add xs acc = match xs with 
          | [] -> acc
          | (y, v) ::xv -> if  List.mem y (free_variables e') then
                two_add xv (acc @ [(y, v)]) else  two_add xv (acc) 
        in 
        let rec three_add xs acc = match xs with 
          | [] -> acc
          | (y, v)::xv -> if  List.mem y (free_variables e') then
                three_add xv (acc) else  three_add xv (acc @ [(y, v)]) 
        in 
        let list_two = two_add xs [] in 
        let list_without = three_add xs [] in 
        let element_one = List.map (fun (huh, _) -> huh) list_two 
        in
        let element_two = List.map (fun (_, huh2) -> huh2) list_two 
        in 
        let (names, expresion) = rename_all element_one e in
        let element3 = List.map2 (fun c d -> (c, d)) (names) element_two in
        let final_list = recursive_add element3 xs list_without [] in 
        Fn(final_list, subst s expresion) 
      else Fn (xs, subst s e)
  
  | Apply (e, es) ->  
      Apply (subst s e, List.map (fun exp -> subst s exp) es)

and rename x e =
  let x' = freshVar x in
  (x', subst (Var x', x) e)

and rename_all names exp =
  List.fold_right
    (fun name (names, exp) ->
       let (name', exp') = rename name exp in
       (name' :: names, exp'))
    names
    ([], exp)

(* Applying a list of substitutions to an expression, leftmost first *)
let subst_list subs exp =
  List.fold_left (fun exp sub -> subst sub exp) exp subs


(* TODO: Write a good set of tests for eval. *)
let eval_tests = [
  (* An example test case.
     Note that you are *only* required to write tests for Rec and Apply!
  *) 
  (Let ("x", I 1, Primop (Plus, [Var "x"; I 5])), I 6);
  (Rec("x", Int, I 5), I 5);
  (Apply(Fn([("x", Int)], Primop (Times, [Var "x"; Var "x"])), [I 2]), I 4);
  (Apply(Fn([("x", Int); ("y", Int)], Primop (Times, [Var "x"; Var "y"])), [I 2; I 2]), I 4);
  (Let ("x", ex1, Apply(Var "x", [I 2; I 3])), I 13);
  (Apply((Fn([("x", Int)], Var "x")), [I 7]), I 7);
  (Apply ((Rec("x", Arrow([Int], Int), Fn([("x", Int)], Var "x"))), [I 7]), I 7);
  (Apply ((Rec("x", Arrow([Int], Int), Fn([("x", Int)], Primop (Times, [Var "x"; Var "x"])))), [I 7]), I 49);
  (Apply ((Rec("S", Arrow([Int], Int), Fn([("x", Int)], Primop (Times, [Var "x"; Var "x"])))), [I 7]), I 49); 
  (Apply (Fn([("x", Int)], Primop (Times, [Var "x"; Var "x"])), [I 7]), I 49);
  (Apply ((Fn([], I 7)), []), I 7) ;
  ((Rec ("q", Int, Primop (Plus, [I 0; I (-4)]))), I (-4)); 
  ((Apply (Fn ([("m", Int)], Var "m"), [I (-4)])), I (-4))
]

(* TODO: Implement the missing cases of eval. *)
let rec eval exp =
  match exp with
  (* Values evaluate to themselves *)
  | I _ -> exp
  | B _ -> exp
  | Fn _ -> exp

  (* This evaluator is _not_ environment-based. Variables should never
     appear during evaluation since they should be substituted away when
     eliminating binding constructs, e.g. function applications and lets.
     Therefore, if we encounter a variable, we raise an error.
*)
  | Var x -> raise (Stuck (Free_variable x))

  (* Primitive operations: +, -, *, <, = *)
  | Primop (po, args) ->
      let args = List.map eval args in
      begin
        match eval_op po args with
        | None -> raise (Stuck Bad_primop_args)
        | Some v -> v
      end

  | If (e, e1, e2) ->
      begin
        match eval e with
        | B true -> eval e1
        | B false -> eval e2
        | _ -> raise (Stuck If_non_true_false)
      end

  | Let (x, e1, e2) ->
      let e1 = eval e1 in
      eval (subst (e1, x) e2) 
                              

  (* eval exp -> exp *)
  (* subst_list: subst list -> exp -> exp *) 
  (*  List.combine: 'a list -> 'b list -> ('a, 'b) list *) 
  (* If anything bad happen then raise stuck*)
  (* in-appropriate value type then run time error*)
  (* Incorrect number of argument = stuck arity_mismatch *)
  (* If the first apply dont evaluate to a function then stuck apply_non_fn *)
  | Rec (f, _, e) -> 
      eval (subst (exp, f) e) 
        
  | Apply (e, es) -> match (eval e) with 
    | Fn(list, exp) -> (
        let eval_es = List.map (fun x -> (eval x)) es in
        let only_var = List.map (fun (y, _) -> y) list in 
        try
          let new_list = List.combine eval_es only_var in
          eval (subst_list (new_list) exp)
        with Invalid_argument(_) -> (raise (Stuck Arity_mismatch))) 
    | _ -> raise (Stuck Apply_non_fn)

(* TODO: Write a good set of tests for infer. *)
let infer_tests = [
  (* An example test case.
     Note that you are *only* required to write tests for Rec, Fn, and Apply!
  *)
  (([("x", Int)], Var "x"), Int);
  (([("x", Bool)], Var "x"), Bool); 
  (([],Fn([], B true)) , Arrow([], Bool));
  (([],Fn([], I 3)) , Arrow([], Int));
  (([],Fn([], I 0)) , Arrow([], Int));
  (([],Fn([], Primop (Plus, [I 1; I 2]))) , Arrow([], Int));
  (([],Fn([("x", Int)], Primop (Plus, [I 1; I 2]))) , Arrow([Int], Int));
  (([("x", Int)],Fn([("x", Int)], Primop (Plus, [I 1; I 2]))) , Arrow([Int], Int));
  (([],Fn([("x", Int);("y", Int)], Primop (Plus, [I 1; I 2]))) , Arrow([Int;Int], Int));
  (([("x", Int);("y", Int)],Fn([("x", Int);("y", Int)], Primop (Plus, [Var "x"; Var "y"]))) , Arrow([Int;Int], Int)); 
  (([("x", Int)],(Rec ("x", Int, I 3))), Int);
  (([("x", Int)], Rec("y", Arrow ([Int], Int),Fn([("x", Int)], Primop (Plus, [Var "x"; I 2])))), Arrow([Int], Int));
  (([],(Rec ("y", Int, I 3))), Int);
  (([],(Rec ("y", Bool, Var "y"))), Bool);
  ((([]), Apply (Fn ([], I 3), [])), Int);
  ((([]), Apply (Fn ([("x", Int)], I 3), [I 3])), Int);
  ((([]), Apply (Fn ([("x", Int); ("y", Int)], I 3), [I 3; I 4])), Int); 
]

(* TODO: Implement the missing cases of infer. *)
let rec infer ctx e =
  match e with
  | Var x ->
      begin
        try lookup x ctx
        with Not_found -> raise (TypeError (Free_variable x))
      end
  | I _ -> Int
  | B _ -> Bool

  | Primop (po, exps) ->
      let (domain, range) = primopType po in
      check ctx exps domain range

  | If (e, e1, e2) ->
      begin
        match infer ctx e with
        | Bool ->
            let t1 = infer ctx e1 in
            let t2 = infer ctx e2 in
            if t1 = t2 then t1
            else type_mismatch t1 t2
        | t -> type_mismatch Bool t
      end

  | Let (x, e1, e2) ->
      let t1 = infer ctx e1 in
      infer (extend ctx (x, t1)) e2
  
        
 (* infer: context -> exp -> tp *) 
 (* extend: context -> (name * tp ) -> context *)
 (* extend_list: context -> (name * tp ) list -> context *)
 (* If apply varibale "x" doesnt have an arrow type we will raise an Type Error*) 
 (* type mismatch raise Type Error *)
 (*type_mistmatch: expectedtype -> actual type -> error*)

  | Rec (f, t, e) ->
      let result = (infer (extend ctx (f, t)) e) in
      if t = result then t else type_mismatch t result

  | Fn (xs, e) -> 
      let only_type = (List.map (fun (_, y) -> y) xs) in 
      let result = (infer (extend_list ctx xs) e) in
      Arrow(only_type, result)
  
  | Apply (e, es) -> 
      let result2 = (infer ctx e) in 
      match result2 with 
      | Arrow(list, result2) -> 
          let get_the_types = List.map (fun y -> (infer ctx y)) es in
          (* see if all the type in get_the_types and list match *)
          let rec find_element list_one list_two = 
            match list_two, list_one  with 
            | [], [] -> result2
            | _, [] -> raise (TypeError Arity_mismatch)
            | [], _ -> raise (TypeError Arity_mismatch)
            | x::xs, v::vs -> (if x = v then 
                                 find_element vs xs else type_mismatch x v) 
          in
          find_element get_the_types list
      | _ -> raise (TypeError (Apply_non_arrow result2))

and check ctx exps tps result =
  match exps, tps with
  | [], [] -> result
  | e :: es, t :: ts ->
      let t' = infer ctx e in
      if t = t' then check ctx es ts result
      else type_mismatch t t'
  | _ -> raise (TypeError Arity_mismatch)

(* TODO: Implement type unification. *)
let rec unify (t1 : utp) (t2 : utp) : unit =
  match t1, t2 with
  (* unifying identical concrete types does nothing *)
  | UInt, UInt -> ()
  | UBool, UBool -> ()
  (* For type constructors, recursively unify the parts *)
  | UArrow (t1, t1'), UArrow (t2, t2') ->
      if ((unify t1 t2) = ()) && ((unify t1' t2') = ()) 
      then ()
      else unif_error @@ UnifMismatch (UArrow(t1, t1'),UArrow (t2, t2')) 
  | UTVar a, _ -> unifyVar a t2
  | _, UTVar b -> unifyVar b t1
  (* All other cases are mismatched types. *)
  | _, _ -> unif_error @@ UnifMismatch (t1, t2)

(* Unify a variable with a type *)
and unifyVar a t = match !a with 
  | Some utp -> unify utp t
  | None -> match t with
    |UTVar b -> (match !b with 
        |Some utp2 ->  unify (UTVar a) utp2
        |None -> if (!a = !b) then ()
            else a := Some (UTVar b))
    | _ -> if (occurs a t) then unif_error @@ UnifOccursCheckFails
        else a := Some(t)